#!/usr/bin/env pybricks-micropython
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor,
                                 InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile
from time import sleep

# Configuration
ev3 = EV3Brick()
gripper_motor = Motor(Port.A)
elbow_motor = Motor(Port.B, Direction.COUNTERCLOCKWISE, [8, 40])
base_motor = Motor(Port.C, Direction.COUNTERCLOCKWISE, [12, 36])
elbow_motor.control.limits(speed=60, acceleration=80)
base_motor.control.limits(speed=60, acceleration=80)
base_switch = TouchSensor(Port.S1)
elbow_sensor = ColorSensor(Port.S2)

#Constants: positions and colors.
LEFT = 206
MIDLEFT = 159
MIDDLE = 113
MIDRIGHT = 66
RIGHT = 8

# Initializes the robot & rotates it to a starting position
elbow_motor.run_target(60, 5)
elbow_motor.run_time(-30, 2000)
elbow_motor.run(15)
# elbow_motor.run_until_stalled(200, then=Stop.COAST, duty_limit=50)
while elbow_sensor.reflection() > 0:
    wait(10)
elbow_motor.run_time(15, 400)
elbow_motor.reset_angle(0)
elbow_motor.hold()
base_motor.run(-60)
while not base_switch.pressed():
    wait(10)
base_motor.reset_angle(0)
base_motor.hold()
gripper_motor.run_until_stalled(200, then=Stop.COAST, duty_limit=50)
gripper_motor.reset_angle(0)
gripper_motor.run_target(1000, -20)
gripper_motor.run_target(200, -90)
ev3.speaker.say("Ready to go!")
for i in range(3):
    wait(100)


def robot_pick(position):
    # This function makes the robot base rotate to the indicated
    # position. There it lowers the elbow, closes the gripper, and
    # raises the elbow to pick up the object.

    base_motor.run_target(60, position)
    elbow_motor.run_target(60, -pickupheight)
    gripper_motor.run_until_stalled(200, then=Stop.HOLD, duty_limit=50)
    elbow_motor.run_target(60, 0)
    # elbow_motor.run_time(10,500)


def robot_release(position):
    # This function makes the robot base rotate to the indicated
    # position. There it lowers the elbow, opens the gripper to
    # release the object. Then it raises its arm again.

    base_motor.run_target(60, position)
    elbow_motor.run_target(60, -dropheight)
    gripper_motor.run_target(200, -90)
    elbow_motor.run_target(60, 0)

def read_rgb_value():
    color_value = elbow_sensor.rgb()
    color_name = elbow_sensor.color()
    print(color_value)
    return color_value

def calculate_rgb_ratio(rgb):
    red, green, blue = rgb
    # Avoid division by zero
    if green == 0:
        green = 1
    if blue == 0:
        blue = 1
    if red == 0:
        red = 1
    
    # Calculate ratios
    red_green_ratio = red / green
    red_blue_ratio = red / blue
    green_red_ratio = green / red
    green_blue_ratio = green / blue
    blue_red_ratio = blue / red
    blue_green_ratio = blue / green
    
    print(red_green_ratio, red_blue_ratio, green_red_ratio, green_blue_ratio, blue_red_ratio, blue_green_ratio)

    if  red_green_ratio >= 1 and red_blue_ratio > 1 and green_red_ratio <= 1 and green_blue_ratio >= 1 and blue_red_ratio <= 1 and blue_green_ratio <= 1:
        color = "Yellow"
    if  red_green_ratio >= 2 and red_blue_ratio >= 1.5 and green_red_ratio <= 1 and blue_red_ratio <= 1:
        color = "Red"
    if  red_green_ratio <= 1 and red_blue_ratio <= 1 and green_red_ratio >= 1 and green_blue_ratio >0.8  and blue_red_ratio >= 1 and blue_green_ratio < 1.2:
        color = "Green"
    if  red_green_ratio <= 1 and red_blue_ratio < 1 and green_red_ratio >= 1 and green_blue_ratio < 1 and blue_red_ratio > 1 and blue_green_ratio > 1:
        color = "Blue"
    print(color)
    ev3.speaker.say(color)
    return color
    
#Variables: Height, pickup-location and designated colors.
pickupheight = 33
dropheight = 33
pickupzone = RIGHT
colorleft = "Blue"
colormidleft = "Red"
colormid = "Yellow"
colormidright = "Green"
colorright = ""
a = True
b = None

while a == True:
   
    robot_pick(pickupzone)
    rgb = read_rgb_value()
    color_name = calculate_rgb_ratio(rgb)

    if color_name == colorleft:
        robot_release(LEFT)
    elif color_name == colormidleft:
        robot_release(MIDLEFT)
    elif color_name == colormid:
        robot_release(MIDDLE)
    elif color_name == colormidright:
        robot_release(MIDRIGHT)
    elif color_name == colorright:
        robot_release(RIGHT)