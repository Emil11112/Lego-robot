#!/usr/bin/env pybricks-micropython
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor,
                                 InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile
from time import sleep
from pybricks.messaging import BluetoothMailboxServer, TextMailbox, BluetoothMailboxClient
import sys

# Configuration
ev3 = EV3Brick()
gripper_motor = Motor(Port.A)
elbow_motor = Motor(Port.B, Direction.COUNTERCLOCKWISE, [8, 40])
base_motor = Motor(Port.C, Direction.COUNTERCLOCKWISE, [12, 36])
elbow_motor.control.limits(speed=150, acceleration=120)
base_motor.control.limits(speed=200, acceleration=120)
base_switch = TouchSensor(Port.S1)
elbow_sensor = ColorSensor(Port.S2)

# Constants: positions and colors.
LEFT = 206
MIDLEFT = 159
MIDDLE = 113
MIDRIGHT = 66
RIGHT = 8
# Variables: Height, pickup-location and designated colors.
pickupzone = RIGHT
colorleft = "Blue"
colormidleft = "Red"
colormid = "Yellow"
colormidright = "Green"
colorright = ""
a = True


def init():
    # Initializes the robot & rotates it to a starting position
    elbow_motor.run_until_stalled(-200, then=Stop.COAST, duty_limit=25)
    wait(1000)
    elbow_motor.reset_angle(-42) # Ã„ndra vinkeln?
    elbow_motor.hold()
    elbow_motor.run_target(50, 0)
    while not base_switch.pressed():
        base_motor.run(-50)
    base_motor.hold()
    base_motor.reset_angle(0)
    gripper_motor.run_until_stalled(200, then=Stop.COAST, duty_limit=50)
    gripper_motor.reset_angle(0)
    gripper_motor.run_target(200, -90)
    ev3.speaker.say("")


def robot_pick(position, pickup_height):
    # This function makes the robot base rotate to the indicated
    # position. Then it lowers the elbow, closes the gripper, and
    # raises the elbow to pick up the object.
    base_move(position)
    elbow_move(-pickup_height)
    gripper_motor.run_until_stalled(200, then = Stop.HOLD, duty_limit = 50)
    elbow_move(0)


def robot_release(position, drop_height):
    # This function makes the robot base rotate to the indicated
    # position. Then it lowers the elbow, opens the gripper to
    # release the object. Then it raises its arm again.
    base_move(position)
    elbow_move(-drop_height)
    gripper_motor.run_target(200, -90)
    elbow_move(0)


def base_move(position, speed=100):
    sent_count = 0
    recieve_count = 0
    base_motor.run_target(speed, position , wait=False)
    while base_motor.angle() != position:
        pressed = ev3.buttons.pressed()
        ev3.screen.draw_text(20, 40, "Center: Stop")
        ev3.screen.draw_text(20, 80, "Up: Pause")
        pressed = ev3.buttons.pressed()
        if Button.UP in pressed:
            pause()
        if Button.CENTER in pressed:
            emergency()
        if multiplayer:
            if base_motor.angle() < 55:
                sentmsg = send_occupied(mbox)
                if sent_count == 0:
                    print("\n"+"Sending Occupied Status")
                    sent_count += 1
            else:
                sentmsg = send_unoccupied(mbox)
            if recieve_occupied(mbox) and sentmsg:
                base_motor.run_target(speed, 60)
            if recieve_occupied(mbox):
                if recieve_count == 0:
                    print("\n"+"Recieved Occupied Status")
                    recieve_count += 1
                while recieve_occupied(mbox):
                    if base_motor.angle() < 55:
                        base_motor.run_target(speed, 60)


def elbow_move(position, speed=100):
    elbow_motor.run_target(speed, position, wait=False)
    while elbow_motor.angle() != position:
        pressed = ev3.buttons.pressed()
        ev3.screen.draw_text(20, 40, "Center: Stop")
        ev3.screen.draw_text(20, 80, "Up: Pause")
        pressed = ev3.buttons.pressed()
        if Button.UP in pressed:
            pause()
        if Button.CENTER in pressed:
            emergency()


def read_rgb_value():
    color_value = elbow_sensor.rgb()
    print(color_value)
    return color_value


def calculate_rgb_ratio(rgb):
    red, green, blue = rgb
    # Calculate ratios
    red_green_ratio = red / (green + 0.001)
    red_blue_ratio = red / (blue + 0.001)
    green_red_ratio = green / (red + 0.001)
    green_blue_ratio = green / (blue + 0.001)
    blue_red_ratio = blue / (red + 0.001)
    blue_green_ratio = blue / (green + 0.001)

    print(red_green_ratio, red_blue_ratio, green_red_ratio, green_blue_ratio, blue_red_ratio, blue_green_ratio)
    try:
        if  (red_green_ratio >= 1 and red_blue_ratio > 1 and green_red_ratio <= 1 and green_blue_ratio >= 1 and
            blue_red_ratio <= 1 and blue_green_ratio <= 1):
                color = "Yellow"
        elif  red_green_ratio >= 2.5 and red_blue_ratio >= 1.5 and green_red_ratio <= 1 and blue_red_ratio <= 1:
            color = "Red"
        elif  (red_green_ratio <= 1 and red_blue_ratio <= 1 and green_red_ratio >= 1 and green_blue_ratio > 0.8  and
            blue_red_ratio >= 1 and blue_green_ratio < 1.5):
                color = "Green"
        elif  (red_green_ratio <= 1 and red_blue_ratio < 1 and green_red_ratio >= 1 and green_blue_ratio < 1 and
            blue_red_ratio > 1 and blue_green_ratio > 1):
            color = "Blue"
        else:
            color = "No color"
    except:
        print("Error")
    print(color)
    ev3.speaker.set_speech_options(speed = 250)
    ev3.speaker.say(color)
    return color


def pause():
    pressed = ev3.buttons.pressed()
    ev3.speaker.say("Pausing")
    while Button.DOWN not in pressed:
        pressed = ev3.buttons.pressed()
        base_motor.hold()
        elbow_motor.hold()
        ev3.screen.draw_text(1, 44, "Push the down")
        ev3.screen.draw_text(1, 64, "button to continue")
        gripper_motor.hold()
        ev3.screen.draw_text(1, 44, "Push the down")
        ev3.screen.draw_text(1, 64, "button to continue")
        elbow_motor.hold()
        ev3.screen.clear()
        ev3.screen.draw_text(1, 44, "Push the down")
        ev3.screen.draw_text(1, 64, "button to continue")
        if Button.CENTER in pressed:
            emergency()
        if Button.DOWN in pressed:
            ev3.speaker.say("Unpausing")
            ev3.screen.clear()


def emergency():
    ev3.speaker.say("Stopping")
    elbow_motor.run_time(-10, 5000)
    gripper_motor.reset_angle(0)
    gripper_motor.run_target(1000, -20)
    gripper_motor.run_target(200, -90)
    sys.exit(0)


def establish_connection(state):
    if state is True:
        server = BluetoothMailboxServer()
        server.wait_for_connection(1)
        print("Server established!")
        mbox = TextMailbox("mbox", server)
        while True:
            wait(2000)
            msg = mbox.wait_new()
            if msg == "ping":
                mbox.send("pong")
                return mbox
    else:
        while True:
            try:
                client = BluetoothMailboxClient()
                client.connect("ev3dev-G")
                mbox = TextMailbox("mbox", client)
                print("Test")
                while True:
                    wait(2000)
                    mbox.send("ping")
                    print("ping")
                    msg = mbox.wait_new()
                    if msg == "pong":
                        return mbox
            except:
                print("Waiting for connection")


def recieve_occupied(mbox): # supposed to recieve true if location is occupied
        location_msg = mbox.read()
        if location_msg == "False":
            return False
        else:
            return True


def send_occupied(mbox): # supposed to send true if location is occupied
    msg = "True"
    mbox.send(msg)


def send_unoccupied(mbox): # supposed to send false if location is unoccupied
    msg = "False"
    mbox.send(msg)


def pickheight():
    pressed = ev3.buttons.pressed()
    print("Choose pickheight on device")
    while Button.RIGHT or Button.LEFT not in pressed:
        pressed = ev3.buttons.pressed()
        ev3.screen.draw_text(12, 20, "LEFT: Elevated")
        ev3.screen.draw_text(12, 50, "RIGHT: Base")
        if Button.LEFT in pressed:
            ev3.screen.clear()
            new_height = 13
            return new_height
        if Button.RIGHT in pressed:
            ev3.screen.clear()
            new_height = 33
            return new_height


def dropheight():
    wait(300)
    pressed = ev3.buttons.pressed()
    print("Choose dropheight on device")
    while Button.LEFT or Button.RIGHT not in pressed:
        pressed = ev3.buttons.pressed()
        ev3.screen.draw_text(12, 20, "Left: Elevated")
        ev3.screen.draw_text(12, 50, "Right: Base")
        if Button.RIGHT in pressed:
            ev3.screen.clear()
            new_height = 33
            return new_height
        if Button.LEFT in pressed:
            ev3.screen.clear()
            new_height = 13
            return new_height


def mainmulti():
    ev3.screen.clear()
    pickup_height = pickheight()
    drop_height = dropheight()
    global mbox
    init()
    mbox = establish_connection(False)
    global multiplayer
    multiplayer = True
    while True:
        # Server skickar in true, client skickar in false i mbox
        wait(500)
        busy = recieve_occupied(mbox)
        while busy == False:
            send_occupied (mbox)
            robot_pick(pickupzone, pickup_height)
            rgb = read_rgb_value()
            color_name = calculate_rgb_ratio(rgb)
            busy = recieve_occupied(mbox)
            if color_name == colorleft:
                robot_release(LEFT, drop_height)
                send_unoccupied(mbox)
                busy = recieve_occupied(mbox)
            elif color_name == colormidleft:
                robot_release(MIDLEFT, drop_height)
                send_unoccupied(mbox)
                busy = recieve_occupied(mbox)
            elif color_name == colormid:
                robot_release(MIDDLE, drop_height)
                send_unoccupied(mbox)
                busy = recieve_occupied(mbox)
            elif color_name == colormidright:
                robot_release(MIDRIGHT, drop_height)
                send_unoccupied(mbox)
                busy = recieve_occupied(mbox)
            elif color_name == colorright:
                robot_release(RIGHT, drop_height)
                send_unoccupied(mbox)
                busy = recieve_occupied(mbox)
            elif color_name == "No color":
                gripper_motor.run_target(1000, -90)
        if busy == True:
            wait(300)
            busy = recieve_occupied(mbox)


def mainsingle():
    ev3.screen.clear()
    pickup_height = pickheight()
    drop_height = dropheight()
    init()
    global multiplayer
    multiplayer = False
    while a == True:
        pressed = ev3.buttons.pressed()
        if Button.CENTER in pressed:
            emergency()
        if Button.UP in pressed:
            pause()
        robot_pick(pickupzone, pickup_height)
        rgb = read_rgb_value()
        color_name = calculate_rgb_ratio(rgb)
        if color_name == colorleft:
            robot_release(LEFT, drop_height)
        elif color_name == colormidleft:
            robot_release(MIDLEFT, drop_height)
        elif color_name == colormid:
            robot_release(MIDDLE, drop_height)
        elif color_name == colormidright:
            robot_release(MIDRIGHT, drop_height)
        elif color_name == colorright:
            robot_release(RIGHT, drop_height)
        elif color_name == "No color":
            gripper_motor.run_target(1000, -90)


def menu():
    pressed = ev3.buttons.pressed()
    print("Choose mode on device")
    while Button.UP or Button.DOWN not in pressed:
        pressed = ev3.buttons.pressed()
        ev3.screen.draw_text(1, 20, "Up: Multiplayer")
        ev3.screen.draw_text(1, 50, "Down: Singleplayer")
        if Button.UP in pressed:
            mainmulti()
        if Button.DOWN in pressed:
            mainsingle()


if _name_ == "_main_":
    menu()

Den slutgiltiga koden